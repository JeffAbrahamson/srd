srd is a secure rolodesk, which is a bit of a retro name for an
encrypted set of notes.  In modern parlance, it might be called a
password vault, but the idea is to be able to write and retrieve
arbitrary bits of text.

srd is being developed on an ubuntu linux system.  There's no real
reason to suspect it wouldn't work elsewhere, but that hasn't been
tested.

There's a library (pending issue #12) if you want to use the code in
another context with minimal hacking.


Want to use it?

I believe the code works.  There are reasonably extensive regtests
that convince me of this.  Issue #5 (script test) will be sorted
shortly, though I've essentially been doing this by hand since the
commandline interface became available.  Feel free to subscribe to
that issue if it's the only thing blocking you.  Send me mail with
feedback.

A handful of minor but important features haven't been implemented
yet.  A couple opportunities for better efficiency are identified,
again, see issues for details.

There's also some code cleanup that's clearly called for.  You're
looking at code during development. ;-)

All this should happen over the next week or two, as I have a bit of
time for doing such things.


Why did I write this?

I wrote a short python script once upon a time to do something
similar.  I developed a bunch of features I wanted to add.  It became
a rewrite.  As an exercise, I decided to see how much longer it would
take to write it in C++ rather than python.  (Answer:  about five times
longer.)  And it amuses me.  And it pushes me to look at some new
libraries and language features that I don't get to use at work.

The other answer, since there's no shortage of password vaults out
there, is that (1) I wanted something that lives nicely on the
commandline, and (2) I wanted to understand the code so that I'm sure
it's doing what I want.  Those could probably both have been satisfied
more easily without writing code, but would have left me less happy.


Here's the usage message:

  Allowed options:

  General options:
    -h [ --help ]         Produce help message
    -v [ --verbose ]      Emit debugging information

  Actions (if none, then match):
    -s [ --shell ]        Run interactive shell
    -e [ --edit ]         Edit record
    -p [ --passwd ]       Change password (no other options permitted)

  Matching options:
    -m [ --match-key ] arg         Restrict to records whose keys match
    -D [ --match-data-or-key ] arg Consider key and data for match (i.e., logical
				   or)
    -d [ --match-data ] arg        Restrict to records whose data match
    -E [ --exact-match ]           Exact match only (applies to all matching)

  Display options:
    -k [ --keys-only ]     Display keys only (default true if multiple matches, 
			   false for single match)
    -f [ --full-display ]  Display full data (default true for single match, 
			   false for multiple matches)
    -g [ --grep ] arg      Output filter for data

  Test options (don't use outside regression tests):
    -T [ --TEST ] arg     Test mode, use local data directory, specify password 
			  on commandline
